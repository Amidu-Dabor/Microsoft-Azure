name: Delete all Azure resource groups

on:
  push:
  workflow_dispatch:
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    # Step 1: Checkout the repository
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    # Step 2: Log in to GitHub Container Registry
    - name: 'Log in to GitHub Container Registry'
      uses: docker/login-action@v3.3.0
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_ACTOR }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Step 3: Lowercase the repository and username
    - name: 'Lowercase the repo and username'
      shell: pwsh
      run: |
        $username = $env:GITHUB_ACTOR
        $repository = $env:GITHUB_REPOSITORY
        $usernameLower = $username.ToLower()
        $repositoryLower = $repository.ToLower()
        Write-Host "Lowercased Username: $usernameLower"
        Write-Host "Lowercased Repository: $repositoryLower"

        # Save the lowercased values as environment variables for the next steps
        echo "REPO=$repositoryLower" >> $GITHUB_ENV
        echo "USERNAME=$usernameLower" >> $GITHUB_ENV

    # Step 4: Set up Docker Buildx
    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3.6.1
        
    # Step 5: Build and push container image to Azure Container Registry (ACR)
    - name: Build and push container image to ACR registry
      uses: docker/build-push-action@v6.7.0
      with:
        push: true
        tags: ${{ env.USERNAME }}.azurecr.io/${{ env.REPO }}:latest
        file: ./Dockerfile

    # Step 6: Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 7: Cache Python packages
    - name: Cache Python packages
      uses: actions/cache@v4.0.2
      with:
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/.python_packages
        key: ${{ runner.os }}-python-packages-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-packages-

    # Step 8: Resolve project dependencies using Pip
    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    # Step 9: Install Azure CLI
    - name: 'Installing Azure CLI'
      shell: bash
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # Step 10: Login to Azure using OpenID Connect
    - name: 'Azure CLI Login with OIDC'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 11: Deploy the application (optional step for actual deployment)
    - name: 'Deploy to Azure'
      run: |
        az webapp create --name ${{ env.REPO }} --resource-group MyResourceGroup --plan MyAppServicePlan --deployment-container-image-name ${{ env.USERNAME }}.azurecr.io/${{ env.REPO }}:latest
